{
  config,
  lib,
  pkgs,
  ...
}:

let
  # and updating cfg accordingly if this service is permanently switching to code-server.
  cfg = config.toHost.code-server;

  # certDir was likely intended for a Caddy setup.
  # It may not be directly used if code-server handles its own TLS certificate as configured below.
  certDir = "/var/lib/caddy/certs";
in
{
  # It's generally a good idea to rename this option set if the service fundamentally changes.
  # For example, to options.toHost.code-server and update the `cfg` variable above.
  options.toHost.code-server = {
    enable = (lib.mkEnableOption "code-server"); # Updated description
    internalPort = lib.mkOption {
      type = lib.types.port;
      default = 2998;
      description = "Internal port, potentially unused if code-server serves HTTPS directly on externalPort. May be used if a reverse proxy setup is re-introduced.";
    };
    externalPort = lib.mkOption {
      type = lib.types.port;
      default = 8443; # Default HTTPS port for code-server
      description = "External HTTPS port for code-server";
    };
    hostname = lib.mkOption {
      type = lib.types.str;
      default = "143.47.53.175"; # IP address or hostname code-server is accessed by
      description = "Hostname or IP address for code-server (used by self-signed certificate)";
    };
    # You could add options for user and extensionsDir here to make them configurable:
    # codeUser = lib.mkOption { type = lib.types.str; default = "yeshey"; description = "User to run code-server as."; };
    # extensionsDirectory = lib.mkOption { type = lib.types.str; default = "/home/yeshey/.vscode-oss/extensions"; description = "Directory for code-server extensions."; };
  };

  config = lib.mkIf cfg.enable {

    # To check logs: journalctl -fu code-server.service
    services.code-server = {
      enable = true;
      package = pkgs.code-server; # This uses the default code-server package from Nixpkgs.
      host = "0.0.0.0";          # Bind to all network interfaces.
      port = cfg.externalPort;   # code-server will listen on this port with HTTPS.
      user = "yeshey";           # User to run code-server as. (Consider using cfg.codeUser if defined above)
      # group = "users";         # Optionally specify the group. Defaults usually work.
      # extraGroups = [];        # Optionally specify any extra groups.

      extraArguments = [
        "--auth=none"            # Disables password/token authentication, similar to withoutConnectionToken.
        "--extensions-dir=/home/yeshey/.vscode-oss/extensions" # Specifies the extensions directory. (Consider using cfg.extensionsDirectory if defined above)
        "--cert"                 # Enables HTTPS with a self-signed certificate generated by code-server.
                                 # The certificate will be stored in the user's data directory for code-server.
                                 # You might need to accept this self-signed certificate in your browser.
        # If code-server has trouble determining the hostname for the certificate,
        # or if you want to be explicit, you can use:
        # "--cert-host=${cfg.hostname}"
      ];

      # The NixOS module for code-server typically handles the creation of necessary
      # data and configuration directories for the specified user.
      # Default data directory: ~${user}/.local/share/code-server
      # Default config directory: ~${user}/.config/code-server
    };

    # The preStart script previously used for openvscode-server to create directories
    # is generally not needed for services.code-server, as the NixOS module handles this.

    networking.firewall.allowedTCPPorts = [
      cfg.externalPort   # Allow access to code-server on its HTTPS port.

      # cfg.internalPort # This port is likely not needed if code-server is serving HTTPS directly
                         # on cfg.externalPort. Uncomment if you have a specific reason to expose it.
      
      # These ports were in your original configuration.
      # They are not directly used by this code-server setup if it's running on cfg.externalPort (e.g., 8443).
      # Keep them if they are needed for other services or for a potential future reverse proxy setup (e.g., Caddy for ACME).
      80
      443
    ];

    systemd.services.code-server = {
      path = [
        pkgs.openssl
      ];
    };


  };
}

name: Update flake.lock & cache NixOS configs (sequential)

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 1 * *'   # 00:00 UTC on the 1st of every month

env:
  CACHIX_CACHE: yesheycachixorg
  CACHIX_TOKEN: ${{ secrets.CACHIX_AUTH_TOKEN }}

jobs:
  build-and-cache:
    strategy:
      fail-fast: false
      matrix:
        include:
          - system: x86_64-linux
            runner: ubuntu-latest
            host: desktop-x86
          - system: aarch64-linux
            runner: ubuntu-22.04-arm
            host: skyloft-aarch

    runs-on: ${{ matrix.runner }}

    steps:
      # ----------------------------------------------------------
      # 0.  Free disk space & install Nix
      # ----------------------------------------------------------
      - name: Delete huge unnecessary tools folder
        run: sudo rm -rf /opt/hostedtoolcache

      - uses: actions/checkout@v4

      - uses: DeterminateSystems/nix-installer-action@main   # installs Nix
      - uses: DeterminateSystems/magic-nix-cache-action@main
      - uses: cachix/cachix-action@v15
        with:
          name: ${{ env.CACHIX_CACHE }}
          authToken: ${{ env.CACHIX_TOKEN }}

      # ----------------------------------------------------------
      # 1.  FULL update + build attempt
      # ----------------------------------------------------------
      - name: Full flake update
        run: nix flake update

      - name: Full flake check
        id: full
        run: nix flake check
        continue-on-error: true

      - name: Build NixOS ${{ matrix.host }} (full)
        if: steps.full.outcome == 'success'
        run: |
          nix build .#nixosConfigurations.${{ matrix.host }}.config.system.build.toplevel -L
          cachix push ${{ env.CACHIX_CACHE }} ./result

      # ----------------------------------------------------------
      # 2.  CLEAN & FALLBACK to nixpkgs-only
      # ----------------------------------------------------------
      - name: Clean all Nix store garbage
        if: steps.full.outcome == 'failure'
        run: |
          nix-store --gc                # delete unreachable paths
          nix-collect-garbage -d        # delete old generations
          nix-store --optimise          # hard-link identical files

      - name: Restore & nixpkgs-only update
        if: steps.full.outcome == 'failure'
        run: |
          git restore flake.lock
          nix flake update nixpkgs nixpkgs-unstable

      - name: nix flake check (nixpkgs-only)
        id: nixpkgs
        if: steps.full.outcome == 'failure'
        run: nix flake check
        continue-on-error: true

      - name: Build NixOS ${{ matrix.host }} (nixpkgs-only)
        if: steps.nixpkgs.outcome == 'success'
        run: |
          nix build .#nixosConfigurations.${{ matrix.host }}.config.system.build.toplevel -L
          cachix push ${{ env.CACHIX_CACHE }} ./result

      # ----------------------------------------------------------
      # 3.  Upload the final lockfile
      # ----------------------------------------------------------
      - name: Upload flake.lock
        uses: actions/upload-artifact@v4
        with:
          name: flake-lock-${{ matrix.system }}
          path: flake.lock

  ############################################################
  # 4.  Commit the new lockfile only if **all** jobs succeeded
  ############################################################
  commit-lock:
    needs: [build-and-cache]   # waits for both architectures
    runs-on: ubuntu-latest
    if: always() && !cancelled() && !failure()
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          pattern: flake-lock-*
          path: .
          merge-multiple: true
      - uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore(deps): update flake.lock"
          file_pattern: flake.lock
          commit_user_name: "github-actions[bot]"
          commit_user_email: "github-actions[bot]@users.noreply.github.com"
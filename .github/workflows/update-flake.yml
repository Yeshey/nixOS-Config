name: Update flake.lock & pre-build NixOS (sequential)

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 1 * *'

env:
  CACHIX_CACHE: yesheycachixorg
  CACHIX_TOKEN: ${{ secrets.CACHIX_AUTH_TOKEN }}
  NIX_CONFIG: experimental-features = nix-command flakes pipe-operators

jobs:
  ##############################################################
  # 1.  Build x86_64-linux
  ##############################################################
  build-x86_64:
    runs-on: ubuntu-latest
    steps:
      - name: Max out disk space
        run: |
          sudo rm -rf /opt/hostedtoolcache
          sudo nix-collect-garbage -d
          sudo nix-store --gc --option keep-outputs false
          df -h

      - uses: actions/checkout@v4
      - uses: DeterminateSystems/nix-installer-action@main
      - uses: cachix/cachix-action@v15
        with:
          name: ${{ env.CACHIX_CACHE }}
          authToken: ${{ env.CACHIX_TOKEN }}

      - name: Full flake update
        run: nix flake update

      - name: nix flake check
        id: full
        run: nix flake check
        continue-on-error: true

      - name: Build NixOS desktop (x86_64-linux)
        if: steps.full.outcome == 'success'
        run: |
          nix build .#nixosConfigurations.desktop.config.system.build.toplevel -L
          cachix push ${{ env.CACHIX_CACHE }} ./result

      - name: Restore & nixpkgs-only update
        if: steps.full.outcome == 'failure'
        run: |
          git restore flake.lock
          nix flake update nixpkgs nixpkgs-unstable

      - name: nix flake check (nixpkgs-only)
        id: nixpkgs
        if: steps.full.outcome == 'failure'
        run: nix flake check
        continue-on-error: true

      - name: Build NixOS desktop (nixpkgs-only)
        if: steps.nixpkgs.outcome == 'success'
        run: |
          nix build .#nixosConfigurations.desktop.config.system.build.toplevel -L
          cachix push ${{ env.CACHIX_CACHE }} ./result

      - name: Upload flake.lock (x86)
        uses: actions/upload-artifact@v4
        with:
          name: flake-lock-x86_64
          path: flake.lock

  ##############################################################
  # 2.  Build aarch64-linux (waits for x86 to finish)
  ##############################################################
  build-aarch64:
    needs: build-x86_64      # sequential!
    runs-on: ubuntu-22.04-arm
    steps:
      - name: Max out disk space
        run: |
          sudo rm -rf /opt/hostedtoolcache
          sudo nix-collect-garbage -d
          sudo nix-store --gc --option keep-outputs false
          df -h

      - uses: actions/checkout@v4
      - uses: DeterminateSystems/nix-installer-action@main
      - uses: cachix/cachix-action@v15
        with:
          name: ${{ env.CACHIX_CACHE }}
          authToken: ${{ env.CACHIX_TOKEN }}

      - name: Full flake update (again â€“ fast because already committed)
        run: nix flake update

      - name: nix flake check
        id: full
        run: nix flake check
        continue-on-error: true

      - name: Build NixOS skyloft (aarch64-linux)
        if: steps.full.outcome == 'success'
        run: |
          nix build .#nixosConfigurations.skyloft.config.system.build.toplevel -L
          cachix push ${{ env.CACHIX_CACHE }} ./result

      - name: Restore & nixpkgs-only update
        if: steps.full.outcome == 'failure'
        run: |
          git restore flake.lock
          nix flake update nixpkgs nixpkgs-unstable

      - name: nix flake check (nixpkgs-only)
        id: nixpkgs
        if: steps.full.outcome == 'failure'
        run: nix flake check
        continue-on-error: true

      - name: Build NixOS skyloft (nixpkgs-only)
        if: steps.nixpkgs.outcome == 'success'
        run: |
          nix build .#nixosConfigurations.skyloft.config.system.build.toplevel -L
          cachix push ${{ env.CACHIX_CACHE }} ./result

      - name: Upload flake.lock (aarch)
        uses: actions/upload-artifact@v4
        with:
          name: flake-lock-aarch64
          path: flake.lock

  ##############################################################
  # 3.  Commit the new lockfile only when both arches succeed
  ##############################################################
  commit-lock:
    needs: [build-x86_64, build-aarch64]
    runs-on: ubuntu-latest
    if: always() && !cancelled() && !failure()
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          pattern: flake-lock-*
          path: .
          merge-multiple: true
      - uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore(deps): update flake.lock"
          file_pattern: flake.lock
          commit_user_name: "github-actions[bot]"
          commit_user_email: "github-actions[bot]@users.noreply.github.com"